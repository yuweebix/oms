// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockThreading is an autogenerated mock type for the threading type
type MockThreading struct {
	mock.Mock
}

type MockThreading_Expecter struct {
	mock *mock.Mock
}

func (_m *MockThreading) EXPECT() *MockThreading_Expecter {
	return &MockThreading_Expecter{mock: &_m.Mock}
}

// AddWorkers provides a mock function with given fields: ctx, n
func (_m *MockThreading) AddWorkers(ctx context.Context, n int) error {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for AddWorkers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockThreading_AddWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorkers'
type MockThreading_AddWorkers_Call struct {
	*mock.Call
}

// AddWorkers is a helper method to define mock.On call
//   - ctx context.Context
//   - n int
func (_e *MockThreading_Expecter) AddWorkers(ctx interface{}, n interface{}) *MockThreading_AddWorkers_Call {
	return &MockThreading_AddWorkers_Call{Call: _e.mock.On("AddWorkers", ctx, n)}
}

func (_c *MockThreading_AddWorkers_Call) Run(run func(ctx context.Context, n int)) *MockThreading_AddWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockThreading_AddWorkers_Call) Return(_a0 error) *MockThreading_AddWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockThreading_AddWorkers_Call) RunAndReturn(run func(context.Context, int) error) *MockThreading_AddWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWorkers provides a mock function with given fields: ctx, n
func (_m *MockThreading) RemoveWorkers(ctx context.Context, n int) error {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWorkers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockThreading_RemoveWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWorkers'
type MockThreading_RemoveWorkers_Call struct {
	*mock.Call
}

// RemoveWorkers is a helper method to define mock.On call
//   - ctx context.Context
//   - n int
func (_e *MockThreading_Expecter) RemoveWorkers(ctx interface{}, n interface{}) *MockThreading_RemoveWorkers_Call {
	return &MockThreading_RemoveWorkers_Call{Call: _e.mock.On("RemoveWorkers", ctx, n)}
}

func (_c *MockThreading_RemoveWorkers_Call) Run(run func(ctx context.Context, n int)) *MockThreading_RemoveWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockThreading_RemoveWorkers_Call) Return(_a0 error) *MockThreading_RemoveWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockThreading_RemoveWorkers_Call) RunAndReturn(run func(context.Context, int) error) *MockThreading_RemoveWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockThreading creates a new instance of MockThreading. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockThreading(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockThreading {
	mock := &MockThreading{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
