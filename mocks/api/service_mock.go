// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.ozon.dev/yuweebix/homework-1/internal/models"
)

// MockService is an autogenerated mock type for the service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AcceptOrder provides a mock function with given fields: ctx, o
func (_m *MockService) AcceptOrder(ctx context.Context, o *models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for AcceptOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AcceptOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptOrder'
type MockService_AcceptOrder_Call struct {
	*mock.Call
}

// AcceptOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockService_Expecter) AcceptOrder(ctx interface{}, o interface{}) *MockService_AcceptOrder_Call {
	return &MockService_AcceptOrder_Call{Call: _e.mock.On("AcceptOrder", ctx, o)}
}

func (_c *MockService_AcceptOrder_Call) Run(run func(ctx context.Context, o *models.Order)) *MockService_AcceptOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockService_AcceptOrder_Call) Return(_a0 error) *MockService_AcceptOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AcceptOrder_Call) RunAndReturn(run func(context.Context, *models.Order) error) *MockService_AcceptOrder_Call {
	_c.Call.Return(run)
	return _c
}

// AcceptReturn provides a mock function with given fields: ctx, o
func (_m *MockService) AcceptReturn(ctx context.Context, o *models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for AcceptReturn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_AcceptReturn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptReturn'
type MockService_AcceptReturn_Call struct {
	*mock.Call
}

// AcceptReturn is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockService_Expecter) AcceptReturn(ctx interface{}, o interface{}) *MockService_AcceptReturn_Call {
	return &MockService_AcceptReturn_Call{Call: _e.mock.On("AcceptReturn", ctx, o)}
}

func (_c *MockService_AcceptReturn_Call) Run(run func(ctx context.Context, o *models.Order)) *MockService_AcceptReturn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockService_AcceptReturn_Call) Return(_a0 error) *MockService_AcceptReturn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AcceptReturn_Call) RunAndReturn(run func(context.Context, *models.Order) error) *MockService_AcceptReturn_Call {
	_c.Call.Return(run)
	return _c
}

// DeliverOrders provides a mock function with given fields: ctx, orderIDs
func (_m *MockService) DeliverOrders(ctx context.Context, orderIDs []uint64) error {
	ret := _m.Called(ctx, orderIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeliverOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) error); ok {
		r0 = rf(ctx, orderIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DeliverOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverOrders'
type MockService_DeliverOrders_Call struct {
	*mock.Call
}

// DeliverOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - orderIDs []uint64
func (_e *MockService_Expecter) DeliverOrders(ctx interface{}, orderIDs interface{}) *MockService_DeliverOrders_Call {
	return &MockService_DeliverOrders_Call{Call: _e.mock.On("DeliverOrders", ctx, orderIDs)}
}

func (_c *MockService_DeliverOrders_Call) Run(run func(ctx context.Context, orderIDs []uint64)) *MockService_DeliverOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockService_DeliverOrders_Call) Return(_a0 error) *MockService_DeliverOrders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_DeliverOrders_Call) RunAndReturn(run func(context.Context, []uint64) error) *MockService_DeliverOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrders provides a mock function with given fields: ctx, userID, limit, offset, isStored
func (_m *MockService) ListOrders(ctx context.Context, userID uint64, limit uint64, offset uint64, isStored bool) ([]*models.Order, error) {
	ret := _m.Called(ctx, userID, limit, offset, isStored)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, uint64, bool) ([]*models.Order, error)); ok {
		return rf(ctx, userID, limit, offset, isStored)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, uint64, bool) []*models.Order); ok {
		r0 = rf(ctx, userID, limit, offset, isStored)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, uint64, bool) error); ok {
		r1 = rf(ctx, userID, limit, offset, isStored)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ListOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrders'
type MockService_ListOrders_Call struct {
	*mock.Call
}

// ListOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - limit uint64
//   - offset uint64
//   - isStored bool
func (_e *MockService_Expecter) ListOrders(ctx interface{}, userID interface{}, limit interface{}, offset interface{}, isStored interface{}) *MockService_ListOrders_Call {
	return &MockService_ListOrders_Call{Call: _e.mock.On("ListOrders", ctx, userID, limit, offset, isStored)}
}

func (_c *MockService_ListOrders_Call) Run(run func(ctx context.Context, userID uint64, limit uint64, offset uint64, isStored bool)) *MockService_ListOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].(uint64), args[4].(bool))
	})
	return _c
}

func (_c *MockService_ListOrders_Call) Return(_a0 []*models.Order, _a1 error) *MockService_ListOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ListOrders_Call) RunAndReturn(run func(context.Context, uint64, uint64, uint64, bool) ([]*models.Order, error)) *MockService_ListOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ListReturns provides a mock function with given fields: ctx, limit, offset
func (_m *MockService) ListReturns(ctx context.Context, limit uint64, offset uint64) ([]*models.Order, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListReturns")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]*models.Order, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []*models.Order); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ListReturns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReturns'
type MockService_ListReturns_Call struct {
	*mock.Call
}

// ListReturns is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint64
//   - offset uint64
func (_e *MockService_Expecter) ListReturns(ctx interface{}, limit interface{}, offset interface{}) *MockService_ListReturns_Call {
	return &MockService_ListReturns_Call{Call: _e.mock.On("ListReturns", ctx, limit, offset)}
}

func (_c *MockService_ListReturns_Call) Run(run func(ctx context.Context, limit uint64, offset uint64)) *MockService_ListReturns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockService_ListReturns_Call) Return(_a0 []*models.Order, _a1 error) *MockService_ListReturns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ListReturns_Call) RunAndReturn(run func(context.Context, uint64, uint64) ([]*models.Order, error)) *MockService_ListReturns_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnOrder provides a mock function with given fields: ctx, o
func (_m *MockService) ReturnOrder(ctx context.Context, o *models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for ReturnOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ReturnOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnOrder'
type MockService_ReturnOrder_Call struct {
	*mock.Call
}

// ReturnOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockService_Expecter) ReturnOrder(ctx interface{}, o interface{}) *MockService_ReturnOrder_Call {
	return &MockService_ReturnOrder_Call{Call: _e.mock.On("ReturnOrder", ctx, o)}
}

func (_c *MockService_ReturnOrder_Call) Run(run func(ctx context.Context, o *models.Order)) *MockService_ReturnOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockService_ReturnOrder_Call) Return(_a0 error) *MockService_ReturnOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ReturnOrder_Call) RunAndReturn(run func(context.Context, *models.Order) error) *MockService_ReturnOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
