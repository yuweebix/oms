// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: returns.proto

package returns

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnRequestMultiError, or nil if none found.
func (m *AcceptReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := AcceptReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AcceptReturnRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptReturnRequestMultiError(errors)
	}

	return nil
}

// AcceptReturnRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnRequestMultiError) AllErrors() []error { return m }

// AcceptReturnRequestValidationError is the validation error returned by
// AcceptReturnRequest.Validate if the designated constraints aren't met.
type AcceptReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnRequestValidationError) ErrorName() string {
	return "AcceptReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnRequestValidationError{}

// Validate checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptReturnResponseMultiError, or nil if none found.
func (m *AcceptReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptReturnResponseMultiError(errors)
	}

	return nil
}

// AcceptReturnResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptReturnResponseMultiError) AllErrors() []error { return m }

// AcceptReturnResponseValidationError is the validation error returned by
// AcceptReturnResponse.Validate if the designated constraints aren't met.
type AcceptReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptReturnResponseValidationError) ErrorName() string {
	return "AcceptReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptReturnResponseValidationError{}

// Validate checks the field values on ListReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsRequestMultiError, or nil if none found.
func (m *ListReturnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLimit() < 0 {
		err := ListReturnsRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListReturnsRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListReturnsRequestMultiError(errors)
	}

	return nil
}

// ListReturnsRequestMultiError is an error wrapping multiple validation errors
// returned by ListReturnsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListReturnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsRequestMultiError) AllErrors() []error { return m }

// ListReturnsRequestValidationError is the validation error returned by
// ListReturnsRequest.Validate if the designated constraints aren't met.
type ListReturnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsRequestValidationError) ErrorName() string {
	return "ListReturnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsRequestValidationError{}

// Validate checks the field values on ListReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsResponseMultiError, or nil if none found.
func (m *ListReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReturnsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReturnsResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReturnsResponseMultiError(errors)
	}

	return nil
}

// ListReturnsResponseMultiError is an error wrapping multiple validation
// errors returned by ListReturnsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsResponseMultiError) AllErrors() []error { return m }

// ListReturnsResponseValidationError is the validation error returned by
// ListReturnsResponse.Validate if the designated constraints aren't met.
type ListReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsResponseValidationError) ErrorName() string {
	return "ListReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsResponseValidationError{}

// Validate checks the field values on ListReturnsResponse_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReturnsResponse_Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReturnsResponse_Order with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReturnsResponse_OrderMultiError, or nil if none found.
func (m *ListReturnsResponse_Order) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReturnsResponse_Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReturnsResponse_OrderValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReturnsResponse_OrderValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReturnsResponse_OrderValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReturnBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReturnsResponse_OrderValidationError{
					field:  "ReturnBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReturnsResponse_OrderValidationError{
					field:  "ReturnBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReturnsResponse_OrderValidationError{
				field:  "ReturnBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Hash

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReturnsResponse_OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReturnsResponse_OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReturnsResponse_OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cost

	// no validation rules for Weight

	// no validation rules for Packaging

	if len(errors) > 0 {
		return ListReturnsResponse_OrderMultiError(errors)
	}

	return nil
}

// ListReturnsResponse_OrderMultiError is an error wrapping multiple validation
// errors returned by ListReturnsResponse_Order.ValidateAll() if the
// designated constraints aren't met.
type ListReturnsResponse_OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReturnsResponse_OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReturnsResponse_OrderMultiError) AllErrors() []error { return m }

// ListReturnsResponse_OrderValidationError is the validation error returned by
// ListReturnsResponse_Order.Validate if the designated constraints aren't met.
type ListReturnsResponse_OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReturnsResponse_OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReturnsResponse_OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReturnsResponse_OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReturnsResponse_OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReturnsResponse_OrderValidationError) ErrorName() string {
	return "ListReturnsResponse_OrderValidationError"
}

// Error satisfies the builtin error interface
func (e ListReturnsResponse_OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReturnsResponse_Order.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReturnsResponse_OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReturnsResponse_OrderValidationError{}
