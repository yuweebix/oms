// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: returns.proto

package returns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Returns_Accept_FullMethodName = "/orders.Returns/Accept"
	Returns_List_FullMethodName   = "/orders.Returns/List"
)

// ReturnsClient is the client API for Returns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReturnsClient interface {
	// Accept принимает возврат от клиента
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptResponse, error)
	// List получает список возвратов
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type returnsClient struct {
	cc grpc.ClientConnInterface
}

func NewReturnsClient(cc grpc.ClientConnInterface) ReturnsClient {
	return &returnsClient{cc}
}

func (c *returnsClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptResponse)
	err := c.cc.Invoke(ctx, Returns_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *returnsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Returns_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReturnsServer is the server API for Returns service.
// All implementations must embed UnimplementedReturnsServer
// for forward compatibility
type ReturnsServer interface {
	// Accept принимает возврат от клиента
	Accept(context.Context, *AcceptRequest) (*AcceptResponse, error)
	// List получает список возвратов
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedReturnsServer()
}

// UnimplementedReturnsServer must be embedded to have forward compatible implementations.
type UnimplementedReturnsServer struct {
}

func (UnimplementedReturnsServer) Accept(context.Context, *AcceptRequest) (*AcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedReturnsServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReturnsServer) mustEmbedUnimplementedReturnsServer() {}

// UnsafeReturnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReturnsServer will
// result in compilation errors.
type UnsafeReturnsServer interface {
	mustEmbedUnimplementedReturnsServer()
}

func RegisterReturnsServer(s grpc.ServiceRegistrar, srv ReturnsServer) {
	s.RegisterService(&Returns_ServiceDesc, srv)
}

func _Returns_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnsServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Returns_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnsServer).Accept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Returns_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Returns_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Returns_ServiceDesc is the grpc.ServiceDesc for Returns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Returns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders.Returns",
	HandlerType: (*ReturnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accept",
			Handler:    _Returns_Accept_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Returns_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "returns.proto",
}
