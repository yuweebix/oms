// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: orders.proto

package orders

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AcceptRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AcceptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AcceptRequestMultiError, or
// nil if none found.
func (m *AcceptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := AcceptRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AcceptRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetExpiry(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = AcceptRequestValidationError{
				field:  "Expiry",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Unix(0, 0)

			if ts.Sub(gt) <= 0 {
				err := AcceptRequestValidationError{
					field:  "Expiry",
					reason: "value must be greater than 1970-01-01 00:00:00 +0000 UTC",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if m.GetCost() <= 0 {
		err := AcceptRequestValidationError{
			field:  "Cost",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := AcceptRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AcceptRequest_Packaging_InLookup[m.GetPackaging()]; !ok {
		err := AcceptRequestValidationError{
			field:  "Packaging",
			reason: "value must be in list [bag,wrap,box]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptRequestMultiError(errors)
	}

	return nil
}

// AcceptRequestMultiError is an error wrapping multiple validation errors
// returned by AcceptRequest.ValidateAll() if the designated constraints
// aren't met.
type AcceptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptRequestMultiError) AllErrors() []error { return m }

// AcceptRequestValidationError is the validation error returned by
// AcceptRequest.Validate if the designated constraints aren't met.
type AcceptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptRequestValidationError) ErrorName() string { return "AcceptRequestValidationError" }

// Error satisfies the builtin error interface
func (e AcceptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptRequestValidationError{}

var _AcceptRequest_Packaging_InLookup = map[string]struct{}{
	"bag,wrap,box": {},
}

// Validate checks the field values on AcceptResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AcceptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AcceptResponseMultiError,
// or nil if none found.
func (m *AcceptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AcceptResponseMultiError(errors)
	}

	return nil
}

// AcceptResponseMultiError is an error wrapping multiple validation errors
// returned by AcceptResponse.ValidateAll() if the designated constraints
// aren't met.
type AcceptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptResponseMultiError) AllErrors() []error { return m }

// AcceptResponseValidationError is the validation error returned by
// AcceptResponse.Validate if the designated constraints aren't met.
type AcceptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptResponseValidationError) ErrorName() string { return "AcceptResponseValidationError" }

// Error satisfies the builtin error interface
func (e AcceptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptResponseValidationError{}

// Validate checks the field values on DeliverRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeliverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliverRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeliverRequestMultiError,
// or nil if none found.
func (m *DeliverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrderIds()) < 1 {
		err := DeliverRequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeliverRequestMultiError(errors)
	}

	return nil
}

// DeliverRequestMultiError is an error wrapping multiple validation errors
// returned by DeliverRequest.ValidateAll() if the designated constraints
// aren't met.
type DeliverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliverRequestMultiError) AllErrors() []error { return m }

// DeliverRequestValidationError is the validation error returned by
// DeliverRequest.Validate if the designated constraints aren't met.
type DeliverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliverRequestValidationError) ErrorName() string { return "DeliverRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeliverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliverRequestValidationError{}

// Validate checks the field values on DeliverResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeliverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliverResponseMultiError, or nil if none found.
func (m *DeliverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeliverResponseMultiError(errors)
	}

	return nil
}

// DeliverResponseMultiError is an error wrapping multiple validation errors
// returned by DeliverResponse.ValidateAll() if the designated constraints
// aren't met.
type DeliverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliverResponseMultiError) AllErrors() []error { return m }

// DeliverResponseValidationError is the validation error returned by
// DeliverResponse.Validate if the designated constraints aren't met.
type DeliverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliverResponseValidationError) ErrorName() string { return "DeliverResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeliverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliverResponseValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 0 {
		err := ListRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsStored

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on ReturnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnRequestMultiError, or
// nil if none found.
func (m *ReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnRequestMultiError(errors)
	}

	return nil
}

// ReturnRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnRequestMultiError) AllErrors() []error { return m }

// ReturnRequestValidationError is the validation error returned by
// ReturnRequest.Validate if the designated constraints aren't met.
type ReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnRequestValidationError) ErrorName() string { return "ReturnRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnRequestValidationError{}

// Validate checks the field values on ReturnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnResponseMultiError,
// or nil if none found.
func (m *ReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReturnResponseMultiError(errors)
	}

	return nil
}

// ReturnResponseMultiError is an error wrapping multiple validation errors
// returned by ReturnResponse.ValidateAll() if the designated constraints
// aren't met.
type ReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnResponseMultiError) AllErrors() []error { return m }

// ReturnResponseValidationError is the validation error returned by
// ReturnResponse.Validate if the designated constraints aren't met.
type ReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnResponseValidationError) ErrorName() string { return "ReturnResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnResponseValidationError{}

// Validate checks the field values on ListResponse_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResponse_Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResponse_OrderMultiError, or nil if none found.
func (m *ListResponse_Order) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse_Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListResponse_OrderValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListResponse_OrderValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResponse_OrderValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReturnBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListResponse_OrderValidationError{
					field:  "ReturnBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListResponse_OrderValidationError{
					field:  "ReturnBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResponse_OrderValidationError{
				field:  "ReturnBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Hash

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListResponse_OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListResponse_OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResponse_OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cost

	// no validation rules for Weight

	// no validation rules for Packaging

	if len(errors) > 0 {
		return ListResponse_OrderMultiError(errors)
	}

	return nil
}

// ListResponse_OrderMultiError is an error wrapping multiple validation errors
// returned by ListResponse_Order.ValidateAll() if the designated constraints
// aren't met.
type ListResponse_OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponse_OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponse_OrderMultiError) AllErrors() []error { return m }

// ListResponse_OrderValidationError is the validation error returned by
// ListResponse_Order.Validate if the designated constraints aren't met.
type ListResponse_OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponse_OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponse_OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponse_OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponse_OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponse_OrderValidationError) ErrorName() string {
	return "ListResponse_OrderValidationError"
}

// Error satisfies the builtin error interface
func (e ListResponse_OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse_Order.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponse_OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponse_OrderValidationError{}
