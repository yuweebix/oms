// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockProducer is an autogenerated mock type for the producer type
type MockProducer struct {
	mock.Mock
}

type MockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducer) EXPECT() *MockProducer_Expecter {
	return &MockProducer_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: topic, message
func (_m *MockProducer) Send(topic string, message interface{}) error {
	ret := _m.Called(topic, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProducer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockProducer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - topic string
//   - message interface{}
func (_e *MockProducer_Expecter) Send(topic interface{}, message interface{}) *MockProducer_Send_Call {
	return &MockProducer_Send_Call{Call: _e.mock.On("Send", topic, message)}
}

func (_c *MockProducer_Send_Call) Run(run func(topic string, message interface{})) *MockProducer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockProducer_Send_Call) Return(_a0 error) *MockProducer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducer_Send_Call) RunAndReturn(run func(string, interface{}) error) *MockProducer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProducer creates a new instance of MockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducer {
	mock := &MockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
