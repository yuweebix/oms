// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "gitlab.ozon.dev/yuweebix/homework-1/internal/models"
)

// MockStorage is an autogenerated mock type for the storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, o
func (_m *MockStorage) CreateOrder(ctx context.Context, o *models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockStorage_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockStorage_Expecter) CreateOrder(ctx interface{}, o interface{}) *MockStorage_CreateOrder_Call {
	return &MockStorage_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, o)}
}

func (_c *MockStorage_CreateOrder_Call) Run(run func(ctx context.Context, o *models.Order)) *MockStorage_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockStorage_CreateOrder_Call) Return(_a0 error) *MockStorage_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateOrder_Call) RunAndReturn(run func(context.Context, *models.Order) error) *MockStorage_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrder provides a mock function with given fields: ctx, o
func (_m *MockStorage) DeleteOrder(ctx context.Context, o *models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_DeleteOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrder'
type MockStorage_DeleteOrder_Call struct {
	*mock.Call
}

// DeleteOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockStorage_Expecter) DeleteOrder(ctx interface{}, o interface{}) *MockStorage_DeleteOrder_Call {
	return &MockStorage_DeleteOrder_Call{Call: _e.mock.On("DeleteOrder", ctx, o)}
}

func (_c *MockStorage_DeleteOrder_Call) Run(run func(ctx context.Context, o *models.Order)) *MockStorage_DeleteOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockStorage_DeleteOrder_Call) Return(_a0 error) *MockStorage_DeleteOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_DeleteOrder_Call) RunAndReturn(run func(context.Context, *models.Order) error) *MockStorage_DeleteOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, o
func (_m *MockStorage) GetOrder(ctx context.Context, o *models.Order) (*models.Order, error) {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) (*models.Order, error)); ok {
		return rf(ctx, o)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) *models.Order); ok {
		r0 = rf(ctx, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Order) error); ok {
		r1 = rf(ctx, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockStorage_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockStorage_Expecter) GetOrder(ctx interface{}, o interface{}) *MockStorage_GetOrder_Call {
	return &MockStorage_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, o)}
}

func (_c *MockStorage_GetOrder_Call) Run(run func(ctx context.Context, o *models.Order)) *MockStorage_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockStorage_GetOrder_Call) Return(_a0 *models.Order, _a1 error) *MockStorage_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetOrder_Call) RunAndReturn(run func(context.Context, *models.Order) (*models.Order, error)) *MockStorage_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, userID, limit, offset, isStored
func (_m *MockStorage) GetOrders(ctx context.Context, userID uint64, limit uint64, offset uint64, isStored bool) ([]*models.Order, error) {
	ret := _m.Called(ctx, userID, limit, offset, isStored)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, uint64, bool) ([]*models.Order, error)); ok {
		return rf(ctx, userID, limit, offset, isStored)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, uint64, bool) []*models.Order); ok {
		r0 = rf(ctx, userID, limit, offset, isStored)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, uint64, bool) error); ok {
		r1 = rf(ctx, userID, limit, offset, isStored)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type MockStorage_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
//   - limit uint64
//   - offset uint64
//   - isStored bool
func (_e *MockStorage_Expecter) GetOrders(ctx interface{}, userID interface{}, limit interface{}, offset interface{}, isStored interface{}) *MockStorage_GetOrders_Call {
	return &MockStorage_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, userID, limit, offset, isStored)}
}

func (_c *MockStorage_GetOrders_Call) Run(run func(ctx context.Context, userID uint64, limit uint64, offset uint64, isStored bool)) *MockStorage_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].(uint64), args[4].(bool))
	})
	return _c
}

func (_c *MockStorage_GetOrders_Call) Return(_a0 []*models.Order, _a1 error) *MockStorage_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetOrders_Call) RunAndReturn(run func(context.Context, uint64, uint64, uint64, bool) ([]*models.Order, error)) *MockStorage_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersForDelivery provides a mock function with given fields: ctx, orderIDs
func (_m *MockStorage) GetOrdersForDelivery(ctx context.Context, orderIDs []uint64) ([]*models.Order, error) {
	ret := _m.Called(ctx, orderIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersForDelivery")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) ([]*models.Order, error)); ok {
		return rf(ctx, orderIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) []*models.Order); ok {
		r0 = rf(ctx, orderIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint64) error); ok {
		r1 = rf(ctx, orderIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetOrdersForDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersForDelivery'
type MockStorage_GetOrdersForDelivery_Call struct {
	*mock.Call
}

// GetOrdersForDelivery is a helper method to define mock.On call
//   - ctx context.Context
//   - orderIDs []uint64
func (_e *MockStorage_Expecter) GetOrdersForDelivery(ctx interface{}, orderIDs interface{}) *MockStorage_GetOrdersForDelivery_Call {
	return &MockStorage_GetOrdersForDelivery_Call{Call: _e.mock.On("GetOrdersForDelivery", ctx, orderIDs)}
}

func (_c *MockStorage_GetOrdersForDelivery_Call) Run(run func(ctx context.Context, orderIDs []uint64)) *MockStorage_GetOrdersForDelivery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockStorage_GetOrdersForDelivery_Call) Return(_a0 []*models.Order, _a1 error) *MockStorage_GetOrdersForDelivery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetOrdersForDelivery_Call) RunAndReturn(run func(context.Context, []uint64) ([]*models.Order, error)) *MockStorage_GetOrdersForDelivery_Call {
	_c.Call.Return(run)
	return _c
}

// GetReturns provides a mock function with given fields: ctx, limit, offset
func (_m *MockStorage) GetReturns(ctx context.Context, limit uint64, offset uint64) ([]*models.Order, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetReturns")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]*models.Order, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []*models.Order); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetReturns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReturns'
type MockStorage_GetReturns_Call struct {
	*mock.Call
}

// GetReturns is a helper method to define mock.On call
//   - ctx context.Context
//   - limit uint64
//   - offset uint64
func (_e *MockStorage_Expecter) GetReturns(ctx interface{}, limit interface{}, offset interface{}) *MockStorage_GetReturns_Call {
	return &MockStorage_GetReturns_Call{Call: _e.mock.On("GetReturns", ctx, limit, offset)}
}

func (_c *MockStorage_GetReturns_Call) Run(run func(ctx context.Context, limit uint64, offset uint64)) *MockStorage_GetReturns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockStorage_GetReturns_Call) Return(_a0 []*models.Order, _a1 error) *MockStorage_GetReturns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetReturns_Call) RunAndReturn(run func(context.Context, uint64, uint64) ([]*models.Order, error)) *MockStorage_GetReturns_Call {
	_c.Call.Return(run)
	return _c
}

// RunTx provides a mock function with given fields: ctx, opts, fn
func (_m *MockStorage) RunTx(ctx context.Context, opts models.TxOptions, fn func(context.Context) error) error {
	ret := _m.Called(ctx, opts, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TxOptions, func(context.Context) error) error); ok {
		r0 = rf(ctx, opts, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_RunTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTx'
type MockStorage_RunTx_Call struct {
	*mock.Call
}

// RunTx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts models.TxOptions
//   - fn func(context.Context) error
func (_e *MockStorage_Expecter) RunTx(ctx interface{}, opts interface{}, fn interface{}) *MockStorage_RunTx_Call {
	return &MockStorage_RunTx_Call{Call: _e.mock.On("RunTx", ctx, opts, fn)}
}

func (_c *MockStorage_RunTx_Call) Run(run func(ctx context.Context, opts models.TxOptions, fn func(context.Context) error)) *MockStorage_RunTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.TxOptions), args[2].(func(context.Context) error))
	})
	return _c
}

func (_c *MockStorage_RunTx_Call) Return(_a0 error) *MockStorage_RunTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_RunTx_Call) RunAndReturn(run func(context.Context, models.TxOptions, func(context.Context) error) error) *MockStorage_RunTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, o
func (_m *MockStorage) UpdateOrder(ctx context.Context, o *models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type MockStorage_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - o *models.Order
func (_e *MockStorage_Expecter) UpdateOrder(ctx interface{}, o interface{}) *MockStorage_UpdateOrder_Call {
	return &MockStorage_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, o)}
}

func (_c *MockStorage_UpdateOrder_Call) Run(run func(ctx context.Context, o *models.Order)) *MockStorage_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Order))
	})
	return _c
}

func (_c *MockStorage_UpdateOrder_Call) Return(_a0 error) *MockStorage_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_UpdateOrder_Call) RunAndReturn(run func(context.Context, *models.Order) error) *MockStorage_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
